<?php
/**
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
use Monolog\Logger;

class BaseTestCase extends PHPUnit_Framework_TestCase
{
    const APPLICATION_NAME = 'Google Slides API Snippet Tests';

    protected static $service;
    protected static $driveService;
    protected static $sheetsService;

    public static function setUpBeforeClass()
    {
        $client = self::createClient();
        BaseTestCase::$service = new Google_Service_Slides($client);
        BaseTestCase::$driveService = new Google_Service_Drive($client);
        BaseTestCase::$sheetsService = new Google_Service_Sheets($client);
    }

    protected function setUp()
    {
        $this->filesToDelete = array();
        // Hide STDOUT output generated by snippets.
        ob_start();
    }

    protected function tearDown()
    {
        foreach ($this->filesToDelete as $fileId) {
            self::$driveService->files->delete($fileId);
        }
        // Restore STDOUT.
        ob_end_clean();
    }

    protected static function createClient()
    {
        // create a log channel
        $log = new Logger('debug');
        $client = new Google_Client();
        $client->setApplicationName(self::APPLICATION_NAME);
        $client->useApplicationDefaultCredentials();
        $client->addScope('https://www.googleapis.com/auth/drive');
        $client->setLogger($log);
        return $client;
    }

    protected function deleteFileOnCleanup($id)
    {
        array_push($this->filesToDelete, $id);
    }

    protected function createTestPresentation()
    {
        $presentation = new Google_Service_Slides_Presentation(array(
            'title' => 'Test Presentation'
        ));
        $presentation = self::$service->presentations->create($presentation);
        $this->deleteFileOnCleanup($presentation->presentationId);
        return $presentation->presentationId;
    }

    protected function createTestSlide($presentationId)
    {
        $requests = array();
        $requests[] = new Google_Service_Slides_Request(array(
            'createSlide' => array(
                'objectId' => 'TestSlide',
                'slideLayoutReference' => array('predefinedLayout' => 'BLANK')
            )
        ));
        $batchUpdateRequest = new Google_Service_Slides_BatchUpdatePresentationRequest(array(
            'requests' => $requests
        ));
        $response = self::$service->presentations->batchUpdate($presentationId, $batchUpdateRequest);
        return $response->getReplies()[0]->getCreateSlide()->getObjectId();
    }

    protected function createTestTextbox($presentationId, $pageId)
    {
        $boxId = 'MyTextBox_01';
        $pt350 = array('magnitude' => 350, 'unit' => 'PT');
        $requests = array();
        $requests[] = new Google_Service_Slides_Request(array(
            'createShape' => array(
                'objectId' => $boxId,
                'shapeType' => 'TEXT_BOX',
                'elementProperties' => array(
                    'pageObjectId' => $pageId,
                    'size' => array(
                        'height' => $pt350,
                        'width' => $pt350
                    ),
                    'transform' => array(
                        'scaleX' => 1,
                        'scaleY' => 1,
                        'translateX' => 350,
                        'translateY' => 100,
                        'unit' => 'PT'
                    )
                )
            )
        ));
        $requests[] = new Google_Service_Slides_Request(array(
            'insertText' => array(
                'objectId' => $boxId,
                'insertionIndex' => 0,
                'text' => 'New Box Text Inserted!'
            )
        ));

        $batchUpdateRequest = new Google_Service_Slides_BatchUpdatePresentationRequest(array(
            'requests' => $requests
        ));
        $response = self::$service->presentations->batchUpdate($presentationId, $batchUpdateRequest);
        return $response->getReplies()[0]->getCreateShape()->getObjectId();
    }

    protected function createSheetsChart($presentationId, $pageId, $spreadsheetId, $sheetChartId)
    {
        $chartId = 'MyChart_01';
        $emu4M = array('magnitude' => 4000000, 'unit' => 'EMU');
        $requests = array();
        $requests[] = new Google_Service_Slides_Request(array(
            'createSheetsChart' => array(
                'objectId' => $chartId,
                'spreadsheetId' => $spreadsheetId,
                'chartId' => $sheetChartId,
                'linkingMode' => 'LINKED',
                'elementProperties' => array(
                    'pageObjectId' => $pageId,
                    'size' => array(
                        'height' => $emu4M,
                        'width' => $emu4M
                    ),
                    'transform' => array(
                        'scaleX' => 1,
                        'scaleY' => 1,
                        'translateX' => 100000,
                        'translateY' => 100000,
                        'unit' => 'EMU'
                    )
                )
            )
        ));

        $batchUpdateRequest = new Google_Service_Slides_BatchUpdatePresentationRequest(array(
            'requests' => $requests
        ));
        $response = self::$service->presentations->batchUpdate($presentationId, $batchUpdateRequest);
        return $response->getReplies()[0]->getCreateSheetsChart()->getObjectId();
    }
}
